---
import { Icon } from "astro-icon/components";
import { twMerge } from "tailwind-merge";
import type { ItemGrid } from "~/types";
import Button from "./Button.astro";
import Image from '~/components/common/Image.astro';

const {
  items = [],
  columns,
  defaultIcon = "",
  classes = {},
} = Astro.props as ItemGrid;

const {
  container: containerClass = "",
  // container: containerClass = "sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3",
  panel: panelClass = "",
  title: titleClass = "",
  description: descriptionClass = "",
  icon: defaultIconClass = "text-primary",
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid gap-8 gap-x-12 sm:gap-y-8 ${
          columns === 4
            ? "lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2"
            : columns === 3
            ? "lg:grid-cols-3 sm:grid-cols-2"
            : columns === 2
            ? "sm:grid-cols-2 "
            : ""
        }`,
        containerClass
      )}
    >
      {items.map(
        ({
          image,
          themedImages = false,
          subtitle,
          title,
          description,
          icon,
          callToAction,
          classes: itemClasses = {},
          cardTag: CardTag = "div",
          cardAttributes = { class: "contents" },
        }) => {
          let lightImage;
          let darkImage;

          if (themedImages) {
            lightImage = { ...(image as any), src: (image as any)["lightSrc"], class: twMerge((image as any)["class"], "block dark:hidden") };
            darkImage = { ...(image as any), src: (image as any)["darkSrc"], class: twMerge((image as any)["class"], "hidden dark:block") };

            delete lightImage["lightSrc"];
            delete lightImage["darkSrc"];
            delete darkImage["lightSrc"];
            delete darkImage["darkSrc"];
          }

          return (
            <CardTag {...cardAttributes}>
              <div
                class={twMerge(
                  "relative flex flex-col",
                  panelClass,
                  itemClasses?.panel
                )}
              >
                {(icon || defaultIcon) && (
                  <Icon
                    name={icon || defaultIcon}
                    class={twMerge(
                      "mb-2 w-10 h-10",
                      defaultIconClass,
                      itemClasses?.icon
                    )}
                  />
                )}
                {
                  image && (
                    <div class={twMerge(
                      "relative m-auto",
                      itemClasses?.imgWrapper
                    )}>
                      {typeof image === 'string' ? (
                        <Fragment set:html={image} />
                      ) : !themedImages ?
                        (<Image
                          class="mx-auto w-full rounded-lg bg-gray-500 shadow-lg"
                          width={500}
                          height={200}
                          widths={[400, 768]}
                          sizes="(max-width: 768px) 100vw, 432px"
                          layout="responsive"
                          {...(image as any)}
                        />) :
                        (<Image
                          class="mx-auto w-full rounded-lg bg-gray-500 shadow-lg"
                          width={500}
                          height={200}
                          widths={[400, 768]}
                          sizes="(max-width: 768px) 100vw, 432px"
                          layout="responsive"
                          {...(lightImage as any)}
                        />
                        <Image
                          class="mx-auto w-full rounded-lg bg-gray-500 shadow-lg"
                          width={500}
                          height={200}
                          widths={[400, 768]}
                          sizes="(max-width: 768px) 100vw, 432px"
                          layout="responsive"
                          {...(darkImage as any)}
                        />)
                      }
                    </div>
                  )
                }
                {
                  subtitle && (
                    <div
                      class={twMerge(
                        "text-sm font-bold",
                        itemClasses?.subtitle
                      )}
                    >
                      {subtitle}
                    </div>
                  )
                }
                <div
                  class={twMerge(
                    "text-xl font-bold",
                    titleClass,
                    itemClasses?.title
                  )}
                >
                  {title}
                </div>
                {description && (
                  <p
                    class={twMerge(
                      "text-muted mt-2",
                      descriptionClass,
                      itemClasses?.description
                    )}
                    set:html={description}
                  />
                )}
                {callToAction && (
                  <div class="mt-2">
                    <Button {...callToAction} />
                  </div>
                )}
              </div>
            </CardTag>
          )
        }
      )}
    </div>
  )
}
